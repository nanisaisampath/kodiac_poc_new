#!/usr/bin/env python3

import argparse
import os
import shutil
from converter import process_input as convert_process_input
from extractor import process_input as extract_process_input
import time
import sys

def cleanup_extra_directory(base_dir, extra_dir_name):
    extra_dir = os.path.join(base_dir, extra_dir_name)
    if os.path.exists(extra_dir) and os.path.isdir(extra_dir):
        for item in os.listdir(extra_dir):
            src = os.path.join(extra_dir, item)
            dst = os.path.join(base_dir, item)
            if os.path.exists(dst):
                print(f"Warning: {dst} already exists and will be overwritten.", flush=True)
            shutil.move(src, base_dir)
        
        # Attempt to remove the directory, with retries
        max_attempts = 5
        for attempt in range(max_attempts):
            try:
                shutil.rmtree(extra_dir)
                print(f"Successfully removed {extra_dir}", flush=True)
                break
            except PermissionError:
                if attempt < max_attempts - 1:
                    print(f"Unable to remove {extra_dir}. Retrying in 2 seconds...", flush=True)
                    time.sleep(2)
                else:
                    print(f"Warning: Unable to remove {extra_dir} after {max_attempts} attempts. Please remove it manually.", flush=True)
    else:
        print(f"No extra directory {extra_dir_name} found in {base_dir}. No cleanup needed.", flush=True)

def main():
    parser = argparse.ArgumentParser(description="DICOM Tool: Convert E2E to DICOM and Extract DICOM data")
    parser.add_argument('input_path', type=str, help="Path to the input file or folder")
    parser.add_argument('-o', '--output', type=str, default=".", help="Path to the output directory")
    parser.add_argument('-v', '--verbose', action='store_true', help="Enable verbose output")
    
    # Mutually exclusive group for operation mode
    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument('-c', '--convert', action='store_true', help="Convert E2E to DICOM")
    group.add_argument('-e', '--extract', action='store_true', help="Extract data from DICOM")
    group.add_argument('-b', '--both', action='store_true', help="Convert E2E to DICOM and then extract data")

    args = parser.parse_args()

    try:
        if args.convert or args.both:
            print("Converting E2E to DICOM...", flush=True)
            converter_output = os.path.join(args.output, "converter_output")
            os.makedirs(converter_output, exist_ok=True)
            convert_process_input(args.input_path, converter_output)
            
            # Clean up extra directory for both -c and -b options
            cleanup_extra_directory(converter_output, "converter_output")
        
        if args.extract or args.both:
            if args.both:
                print("Extracting data from converted DICOM files...", flush=True)
                input_folder_name = os.path.basename(args.input_path)
                extractor_input = os.path.join(converter_output, f"{input_folder_name}_converted")
                extractor_output = os.path.join(args.output, "extractor_output")
            else:
                print("Extracting data from DICOM files...", flush=True)
                extractor_input = args.input_path
                extractor_output = args.output
            
            os.makedirs(extractor_output, exist_ok=True)
            extract_process_input(extractor_input, extractor_output)
            
            if args.both:
                # Clean up extra directory only for -b option
                cleanup_extra_directory(extractor_output, "extractor_output")

        print("Operation completed successfully.", flush=True)
    except Exception as e:
        print(f"An error occurred: {str(e)}", flush=True)
        print("This error does not necessarily mean the operation failed. Please check the output directories.", flush=True)
    finally:
        print("Please review the output directories and remove any unnecessary folders manually if needed.", flush=True)

if __name__ == "__main__":
    main()
